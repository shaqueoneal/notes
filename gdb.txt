1、监控变量
监控内存地址0xf03f4529，为0时断入
(gdb) watch *0xf03f4529 == 0

2、查看结构成员偏移
(gdb) file product/cr16k/npu/cpa/prj/debug/cpa.ko
Reading symbols from /home/share/New/s07162/CR16000V700R001B03BBIT00/product/cr16k/npu/cpa/prj/debug/cpa.ko...done.
(gdb) p &(((MBUF_S *)0)->stTag.ifIndexOutbound)  
$1 = (unsigned int *) 0x50  -----> ifIndexOutbound成员的偏移为0x50 就是偏移80个字节
(gdb)

3、调试子进程
(gdb) help set follow-fork-mode 
Set debugger response to a program call of fork or vfork.
A fork or vfork creates a new process.  follow-fork-mode can be:
  parent  - the original process is debugged after a fork
  child   - the new process is debugged after a fork
The unfollowed process will continue to run.
By default, the debugger will follow the parent process.

4、gdb调试进程
$ su
# 
# ps | grep comsh
  434 1000     87960 S    /sbin/comsh shell level 0
  779 1000     86804 S    /sbin/comsh shell level 0
  786 1000     85776 S    /sbin/comsh shell level 0
  812 0         2228 S    grep comsh
# gdb attach 786

5、读写变量
print  symbol
set symbol=value

6、混合显示函数的代码和汇编
(gdb) file product/cr16k/npu/cpa/prj/debug/cpa.ko
Reading symbols from /home/share/s07162/B48BRASSP5/CR16000V700R001B02D001SP05/product/cr16k/npu/cpa/prj/debug/cpa.ko...done.
(gdb) disassemble /m DRV_STR_IsDigit
Dump of assembler code for function DRV_STR_IsDigit:
156     {
   0x01352100 <+0>:     stwu    r1,-32(r1)
   0x01352104 <+4>:     mflr    r0
   0x01352108 <+8>:     stw     r0,36(r1)
   0x0135210c <+12>:    stw     r3,24(r1)

157         UINT i = 0;
   0x01352110 <+16>:    li      r0,0
   0x01352114 <+20>:    stw     r0,12(r1)

7、和源代码对应
使用GDB/KGDB 调试时，客户端是在Windows上面，而我们的代码是在服务器上，而且内部调试信息中指定的是编译机上面的绝对路径，比如/home/share/code/xxxxxx
这种情况下，GDB自己无法和当前Windows下面映射的网络硬盘路径对应起来，无法在调试时和源代码对应
解决方案
GDB中提供了一种方式，可以设置源代码路径的替换规则，通过它即可实现路径的替换。相关命令如下：
set   substitute-path  from  to
unset substitute-path
show  substitute-path
比如 set substitute-path   /home/code/gongjianmin/1204_B48_1216   /cygdrive/v/1204_B48_1216
设置之后就可以和源代码对应了
*设置时Windows上面映射的网络硬盘，需要在前面加 /cygdrive/ 前缀

8、获取临时变量偏移
(gdb) file platform_leopard/product/sr8800/mpu_xlp/prj/debug/sr8800.ko
Reading symbols from /home/code/zhaofancheng/SR8800V700R001B02D002/SR8800V700R001B02D002/bcmplat_code_lsw_v7/platform_leopard/product/sr8800/mpu_xlp/prj/debug/sr8800.ko...done.
(gdb) info scope DRV_INDEXQ_ShowStruct  
Scope for DRV_INDEXQ_ShowStruct:
Symbol uiHandle is a variable at frame base reg $sp offset 0+-32, length 4.  ---------------> 这里的数值-32就是距离堆栈指针SP的偏移值
Symbol uiBufSize is a variable at frame base reg $sp offset 0+-28, length 4.

9、用Info line解析异常所在文件地址
mips64-octeon-linux-gnu-gdb sr8800.ko
(gdb) info line *(PRIMAP_kdrv_SetMapTblItem+0x74)
Line 195 of "/home/PUBLIC/kernel/lan_sr8800_npu_xlp/qos/primap/primap_kdrv.c"
???starts at address 0xdcc0c4 <PRIMAP_kdrv_SetMapTblItem+84> and ends at 0xdcc0e8 <PRIMAP_kdrv_SetMapTblItem+120>.

10、windows gdb调试内核步骤
file vmlinux	//加载内核可执行文件
target remote udp:10.11.113.175:10000      //链接需调试的目的主机                                                                                        	
add-symbol-file mrpnc.ko 0xd2140000 -s .bss 0xd2d84f20 -s .data 0xd2d3aaa8		//.ko是内核动态加载库，调试时需要告知gdb客户端对应的地址

获取方法1：
cat   /sys/module/XXX/sections/.text
cat   /sys/module/XXX/sections/.bss
cat   /sys/module/XXX/sections/.data

11、调试线程
info threads
thread 10            //行首编号

12、进程cpu高
1) top 查看到进程8264 cpu高
2) 查看进程中占用cpu高的线程，找到占用cpu时间高的线程 id 8413
$ps -m -o tid,cpu,time -p 8264
或者
$top -H -p 8264
或者
ps -eL |grep 8264

3) 查看调用栈
gstack 8413

4) gdb 找到8413线程进入 
$ gdb 
attach 8264
info threads
thread tid
接下来可以单步执行，此时默认其他进程的线程会停止，
如需打开用 set schedule-multiple on

13、打断点
break file:line

14、解析地址
x 0x00000039df8e890d

